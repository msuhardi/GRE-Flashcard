{
  "_args": [
    [
      {
        "raw": "redux-immutablejs",
        "scope": null,
        "escapedName": "redux-immutablejs",
        "name": "redux-immutablejs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/msuhardi/AwesomeProject"
    ]
  ],
  "_from": "redux-immutablejs@latest",
  "_id": "redux-immutablejs@0.0.8",
  "_inCache": true,
  "_location": "/redux-immutablejs",
  "_nodeVersion": "5.1.0",
  "_npmUser": {
    "name": "asaf",
    "email": "asaf000@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-immutablejs",
    "scope": null,
    "escapedName": "redux-immutablejs",
    "name": "redux-immutablejs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-immutablejs/-/redux-immutablejs-0.0.8.tgz",
  "_shasum": "2c173dac1aaebfb20ec86e076b7e2ce65f487a41",
  "_shrinkwrap": null,
  "_spec": "redux-immutablejs",
  "_where": "/Users/msuhardi/AwesomeProject",
  "author": {
    "name": "Indexia Tech"
  },
  "bugs": {
    "url": "https://github.com/indexiatech/redux-immutablejs/issues"
  },
  "dependencies": {},
  "description": "Redux Immutable facilities",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.6.18",
    "babel-loader": "^5.1.4",
    "eslint-config-airbnb": "0.0.8",
    "eslint-plugin-react": "^3.3.1",
    "expect": "^1.9.0",
    "immutable": "^3.7.5",
    "mocha": "^2.3.3",
    "node-libs-browser": "^0.5.2",
    "redux": "^3.0.0",
    "webpack": "^1.9.11",
    "webpack-dev-server": "^1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2c173dac1aaebfb20ec86e076b7e2ce65f487a41",
    "tarball": "https://registry.npmjs.org/redux-immutablejs/-/redux-immutablejs-0.0.8.tgz"
  },
  "files": [
    "src",
    "lib"
  ],
  "gitHead": "494c68cabc09814cd5049426911a3ce80bdc6eed",
  "homepage": "http://indexiatech.github.io/redux-immutable",
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "asaf",
      "email": "asaf000@gmail.com"
    }
  ],
  "name": "redux-immutablejs",
  "optionalDependencies": {},
  "peerDependencies": {
    "redux": "^2.0.0 || ^3.0.0",
    "immutable": "^3.7.5"
  },
  "readme": "# `redux-immutablejs`\n\nRedux & Immutable integration\n\nThis is a small library that aims to provide integration tools between [Redux](https://github.com/rackt/redux)\n& [ImmutableJs](https://facebook.github.io/immutable-js/) that fully conforms Redux _actions_ & _reducers_ standards.\n\n1. An alternative to [combineReducers](http://rackt.github.io/redux/docs/api/combineReducers.html) that supports\n[ImmutableJs](https://facebook.github.io/immutable-js/) for store initial state.\n1. An optional handler map reducer creator with immutable support.\n\n\n# Setup\n\n## Initial State\n\nUsing `combineReducers` it is possible to provide `createStore` with initial state using Immutable [Iterable](https://facebook.github.io/immutable-js/docs/#/Iterable) type, i.e:\n\n```js\nimport { createStore } from 'redux';\nimport { combineReducers } from 'redux-immutablejs';\n\nimport Immutable from 'immutable';\nimport * as reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nconst state = Immutable.fromJS({});\n\nconst store = reducer(state);\nexport default createStore(reducer, store);\n```\n\n## Immutable Handler Map reducer creator\n\nUsing `createReducer` is an optional function that creates a reducer from a collection of handlers. In addition to\ngetting rid of the _switch_ statement, it also provides the following benefits:\n\n1. If the given `initialState` type is mutated, it will get converted to an immutable type.\n1. An error is produced in case a reducer handler returns a mutated state (not recommended but this behavior can be disabled)\n\n```js\nimport { createReducer } from 'redux-immutablejs'\nconst initialState = Immutable.fromJS({ isAuth: false })\n\n/**\n * Reducer domain that handles authentication & authorization.\n **/\nexport default createReducer(initialState, {\n  [LOGIN]: (state, action) => state.merge({\n    isAuth: true,\n    token: action.payload.token\n  }),\n\n  [LOGOUT]: (domain) => domain.merge({\n    isAuth: false,\n    current_identity: {},\n    token: undefined\n  })\n})\n```\n\nIf you want to specify the Immutable type to be used for implicit conversion, pass an constructor function at the end:\n\n```js\nexport default createReducer([], {\n  [ADD_STUFF]: (state, { stuff }) => state.add(stuff)\n}, true, ::Immutable.OrderedSet);\n\n```\n\nPlease note that this is optional and `combineReducers` should work just fine if you prefer the old `switch` way.\n\n\n# FAQ\n\n## How this library is different from 'redux-immutable' ?\n\nThis library doesn't dictate any specific reducer structure.\nWhile `redux-immutable` focuses on [CRC](https://github.com/gajus/canonical-reducer-composition), this library\nprovides some [conversion middlewares](https://github.com/gajus/redux-immutable/issues/3) from FSA to CCA\nand vise versa. If you feel like going with _Redux's vanilla_ is the right approach, then consider using our library.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/indexiatech/redux-immutable.git"
  },
  "scripts": {
    "build:lib": "babel src --out-dir lib",
    "build:publish": "npm publish",
    "prepublish": "npm run build:lib",
    "start": "node server.js",
    "test": "mocha --recursive --compilers js:babel-core/register",
    "test:watch": "npm test -- --watch"
  },
  "version": "0.0.8"
}
