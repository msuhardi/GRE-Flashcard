{
  "_args": [
    [
      {
        "raw": "react-native-sound",
        "scope": null,
        "escapedName": "react-native-sound",
        "name": "react-native-sound",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/msuhardi/AwesomeProject"
    ]
  ],
  "_from": "react-native-sound@latest",
  "_id": "react-native-sound@0.10.1",
  "_inCache": true,
  "_location": "/react-native-sound",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-native-sound-0.10.1.tgz_1494254904629_0.9340214850381017"
  },
  "_npmUser": {
    "name": "benvium",
    "email": "ben@calvium.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-sound",
    "scope": null,
    "escapedName": "react-native-sound",
    "name": "react-native-sound",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-sound/-/react-native-sound-0.10.1.tgz",
  "_shasum": "c6afa5114cea6e39f479a2c67d6d843894ed745c",
  "_shrinkwrap": null,
  "_spec": "react-native-sound",
  "_where": "/Users/msuhardi/AwesomeProject",
  "author": {
    "name": "Zhen Wang",
    "email": "z@zmxv.com",
    "url": "http://blog.zmxv.com"
  },
  "bugs": {
    "url": "https://github.com/zmxv/react-native-sound/issues"
  },
  "dependencies": {},
  "description": "React Native module for playing sound clips on iOS, Android, and Windows",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "c6afa5114cea6e39f479a2c67d6d843894ed745c",
    "tarball": "https://registry.npmjs.org/react-native-sound/-/react-native-sound-0.10.1.tgz"
  },
  "gitHead": "4f75daa16e3ed9b0a84ae2bee4d7513bce663f0a",
  "homepage": "https://github.com/zmxv/react-native-sound#readme",
  "keywords": [
    "react-native",
    "react-component",
    "sound",
    "audio"
  ],
  "license": "MIT",
  "main": "sound.js",
  "maintainers": [
    {
      "name": "benvium",
      "email": "ben@calvium.com"
    },
    {
      "name": "zmxv",
      "email": "z@zmxv.com"
    }
  ],
  "name": "react-native-sound",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.8.0"
  },
  "readme": "# react-native-sound\n\nReact Native module for playing sound clips on iOS, Android, and Windows.\n\n## Feature matrix\n\nFeature | iOS | Android | Windows\n---|---|---|---\nLoad sound from the app bundle | ✓ | ✓ | ✓  \nLoad sound from other directories | ✓ | ✓ | ✓\nLoad sound from the network | ✓ | ✓ |\nPlay sound | ✓ | ✓ | ✓\nPlayback completion callback | ✓ | ✓ | ✓\nPause | ✓ | ✓ | ✓\nResume | ✓ | ✓ | ✓\nStop | ✓ | ✓ | ✓\nRelease resource | ✓ | ✓ | ✓\nGet duration | ✓ | ✓ | ✓\nGet number of channels | ✓ |   |\nGet/set volume | ✓ | ✓ | ✓\nGet/set pan | ✓ |   |\nGet/set loops | ✓ | ✓ | ✓\nGet/set current time | ✓ | ✓ | ✓\nSet speed | ✓ | ✓ |\n\n## Installation\n\nFirst install the npm package from your app directory:\n\n```javascript\nnpm install react-native-sound --save\n```\n\nThen link it automatically using:\n\n```javascript\nreact-native link react-native-sound\n```\n\n### Manual Installation on iOS\n\nThis is not necessary if you have used `react-native link`\n\nIn XCode, right click **Libraries**.\nClick **Add Files to \"[Your project]\"**.\nNavigate to **node_modules/react-native-sound**.\nAdd the file **RNSound.xcodeproj**.\n\nIn the *Project Navigator*, select your project.\nClick the build target.\nClick **Build Phases**.\nExpand **Link Binary With Libraries**.\nClick the plus button and add **libRNSound.a** under **Workspace**.\n\nDrag and drop sound files into *Project Navigator* to add them to the project.  Verify that the files are packaged in the app bundle in either way:\n\n* Select a sound file in the *Project Navigator*, tick the checkbox in the *Target Membership* list on the right.\n* Alternatively, click the build target, click **Build Phases**, expand **Copy Bundle Resources**, add the file if it's not already listed.\n\nRun your project (⌘+R).\n\n### Manual Installation on Android\n\nThis is not necessary if you have used `react-native link`\n\nEdit `android/settings.gradle` to declare the project directory:\n```\ninclude ':react-native-sound'\nproject(':react-native-sound').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-sound/android')\n```\n\nEdit `android/app/build.gradle` to declare the project dependency:\n```\ndependencies {\n  ...\n  compile project(':react-native-sound')\n}\n```\n\nEdit `android/app/src/main/java/.../MainApplication.java` to register the native module:\n\n```java\n...\nimport com.zmxv.RNSound.RNSoundPackage; // <-- New\n...\n\npublic class MainApplication extends Application implements ReactApplication {\n  ...\n  @Override\n  protected List<ReactPackage> getPackages() {\n    return Arrays.<ReactPackage>asList(\n        new MainReactPackage(),\n        new RNSoundPackage() // <-- New\n    );\n  }\n```\n\nFor older versions of React Native you need to edit `MainActivity.java` instead:\n\n```java\n...\nimport com.zmxv.RNSound.RNSoundPackage; // <-- New\n...\n\npublic class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {\n  ...\n    @Override\n  protected void onCreate(Bundle savedInstanceState){\n    ...\n    mReactInstanceManager = ReactInstanceManager.builder()\n      .setApplication(getApplication())\n      ...\n      .addPackage(new MainReactPackage())\n      .addPackage(new RNSoundPackage()) // <-- New\n      ...\n  }\n```\n\n## Demo project\n\nhttps://github.com/zmxv/react-native-sound-demo\n\n## Basic usage\n\nFirst you'll need to audio files to your project.\n\n- Android: Save your sound clip files under the directory `android/app/src/main/res/raw`. Note that files in this directory must be lowercase and underscored (e.g. my_file_name.mp3) and that subdirectories are not supported by Android.\n- iOS: Open Xcode and add your sound files to the project (Right-click the project and select `Add Files to [PROJECTNAME]`)\n\n```js\n// Import the react-native-sound module\nvar Sound = require('react-native-sound');\n\n// Enable playback in silence mode (iOS only)\nSound.setCategory('Playback');\n\n// Load the sound file 'whoosh.mp3' from the app bundle\n// See notes below about preloading sounds within initialization code below.\nvar whoosh = new Sound('whoosh.mp3', Sound.MAIN_BUNDLE, (error) => {\n  if (error) {\n    console.log('failed to load the sound', error);\n    return;\n  } \n  // loaded successfully\n  console.log('duration in seconds: ' + whoosh.getDuration() + 'number of channels: ' + whoosh.getNumberOfChannels());\n});\n\n// Play the sound with an onEnd callback\nwhoosh.play((success) => {\n  if (success) {\n    console.log('successfully finished playing');\n  } else {\n    console.log('playback failed due to audio decoding errors');\n  }\n});\n\n// Reduce the volume by half\nwhoosh.setVolume(0.5);\n\n// Position the sound to the full right in a stereo field\nwhoosh.setPan(1);\n\n// Loop indefinitely until stop() is called\nwhoosh.setNumberOfLoops(-1);\n\n// Get properties of the player instance\nconsole.log('volume: ' + whoosh.getVolume());\nconsole.log('pan: ' + whoosh.getPan());\nconsole.log('loops: ' + whoosh.getNumberOfLoops());\n\n// Seek to a specific point in seconds\nwhoosh.setCurrentTime(2.5);\n\n// Get the current playback point in seconds\nwhoosh.getCurrentTime((seconds) => console.log('at ' + seconds));\n\n// Pause the sound\nwhoosh.pause();\n\n// Stop the sound and rewind to the beginning\nwhoosh.stop();\n\n// Release the audio player resource\nwhoosh.release();\n```\n\n## API\n### `constructor(filename, basePath, onError)`\n`filename` {string} Either absolute or relative path to the sound file\n\n`basePath` {?string} Optional base path of the file. Omit this or pass `''` if `filename` is an absolute path. Otherwise, you may use one of the predefined directories: `Sound.MAIN_BUNDLE`, `Sound.DOCUMENT`, `Sound.LIBRARY`, `Sound.CACHES`.\n\n`onError` {?function(error, props)} Optional callback function. If the file is successfully loaded, the first parameter `error` is `null`, and `props` contains an object with two properties: `duration` (in seconds) and `numberOfChannels` (`1` for mono and `2` for stereo sound), both of which can also be accessed from the `Sound` instance object. If an initialization error is encountered (e.g. file not found), `error` will be an object containing `code`, `description`, and the stack trace.\n\n### `isLoaded()`\nReturn `true` if the sound has been loaded.\n\n### `play(onEnd)`\n`onEnd` {?function(successfully)} Optinoal callback function that gets called when the playback finishes successfully or an audio decoding error interrupts it.\n\n### `pause()`\nPause the sound.\n\n### `stop()`\nStop the playback.\n\n### `release()`\nRelease the audio player resource associated with the instance.\n\n### `getDuration()`\nReturn the duration in seconds, or `-1` before the sound gets loaded.\n\n### `getNumberOfChannels()`\nReturn the number of channels (`1` for mono and `2` for stereo sound), or `-1` before the sound gets loaded.\n\n### `getVolume()`\nReturn the volume of the audio player (not the system-wide volume), ranging from `0.0` (silence) through `1.0` (full volume, the default).\n\n### `setVolume(value)`\n`value` {number} Set the volume, ranging from `0.0` (silence) through `1.0` (full volume).\n\n### `getPan()`\nReturn the stereo pan position of the audio player (not the system-wide pan), ranging from `-1.0` (full left) through `1.0` (full right). The default value is `0.0` (center).\n\n### `setPan(value)`\n`value` {number} Set the pan, ranging from `-1.0` (full left) through `1.0` (full right).\n\n### `getNumberOfLoops()`\nReturn the loop count of the audio player. The default is `0` which means to play the sound once. A positive number specifies the number of times to return to the start and play again. A negative number indicates an indefinite loop.\n\n### `setNumberOfLoops(value)`\n`value` {number} Set the loop count. `0` means to play the sound once. A positive number specifies the number of times to return to the start and play again (iOS only). A negative number indicates an indefinite loop (iOS and Android).\n\n### `getCurrentTime(callback)`\n`callback` {function(seconds, isPlaying)} Callback will receive the current playback position in seconds and whether the sound is being played.\n\n### `setCurrentTime(value)`\n`value` {number} Seek to a particular playback point in seconds.\n\n### `setSpeed(value)`\n`value` {number} Speed of the audio playback (iOS Only).\n\n### `enableInSilenceMode(enabled)` (deprecated)\n`enabled` {boolean} Whether to enable playback in silence mode (iOS only).\n\nUse the static method `Sound.setCategory('Playback')` instead which has the same effect.\n\n### `setCategory(value)` (deprecated)\n\nDeprecated. Use the static method `Sound.setCategory` instead.\n\n## Static Methods\n\n### `Sound.setCategory(value, mixWithOthers) (iOS only)`\n\n`value` {string} Sets AVAudioSession category, which allows playing sound in background, stop sound playback when phone is locked, etc. Parameter options: \"Ambient\", \"SoloAmbient\", \"Playback\", \"Record\", \"PlayAndRecord\", \"AudioProcessing\", \"MultiRoute\".\n\nMore info about each category can be found in https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioSession_ClassReference/#//apple_ref/doc/constant_group/Audio_Session_Categories\n\n`mixWithOthers` {boolean} can be set to true to force mixing with other audio sessions.\n\nTo play sound in the background, make sure to add the following to the `Info.plist` file.\n```\n<key>UIBackgroundModes</key>\n<array>\n  <string>audio</string>\n</array>\n```\n\n## Notes\n- To minimize playback delay, you may want to preload a sound file without calling `play()` (e.g. `var s = new Sound(...);`) during app initialization. This also helps avoid a race condition where `play()` may be called before loading of the sound is complete, which results in no sound but no error because loading is still being processed.\n- You can play multiple sound files at the same time. Under the hood, this module uses `AVAudioSessionCategoryAmbient` to mix sounds on iOS.\n- You may reuse a `Sound` instance for multiple playbacks.\n- On iOS, the module wraps `AVAudioPlayer` that supports aac, aiff, mp3, wav etc. The full list of supported formats can be found at https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/SupportedAudioFormatsMacOSX/SupportedAudioFormatsMacOSX.html\n- On Android, the module wraps `android.media.MediaPlayer`. The full list of supported formats can be found at https://developer.android.com/guide/topics/media/media-formats.html\n- You may chain non-getter calls, for example, `sound.setVolume(.5).setPan(.5).play()`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zmxv/react-native-sound.git"
  },
  "scripts": {},
  "version": "0.10.1"
}
